{"version":3,"file":"notesBundle.js.map","sources":["../src/notes.ts"],"sourcesContent":["import EditorJS, {BlockToolConstructable, InlineToolConstructable} from '@editorjs/editorjs';\nimport Header from '@editorjs/header';\nimport RawTool from '@editorjs/raw';\nimport EditorjsList from '@editorjs/list';\n\nimport {EditorState} from \"@codemirror/state\"\nimport {EditorView, keymap} from \"@codemirror/view\"\nimport {defaultKeymap} from \"@codemirror/commands\"\n\nimport Quill from 'quill';\n\n\n//----------------------------- Notes -----------------------------------\n// const editor = new EditorJS({\n//     holder: 'editorjs',\n//     tools: {\n//         header: {\n//             class: Header as unknown as BlockToolConstructable,\n//             inlineToolbar: ['link']\n//         },\n//         list: {\n//             class: EditorjsList as unknown as BlockToolConstructable,\n//             inlineToolbar: true,\n//             config: {\n//                 defaultStyle: 'unordered',\n//             }\n//         },\n//         raw: {\n//             class: RawTool as unknown as BlockToolConstructable\n//         },\n//\n//     }\n// });\n\n\n\n\n//----------------------------- Login -----------------------------------\nconst login_status:HTMLElement = document.getElementById('login_status');\n\nasync function login(serverUrl: string, username: string, password: string):Promise<string> {\n    const response = await fetch(`${proxyURL}/login?serverUrl=${encodeURIComponent(serverUrl)}&username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`, {\n        method: \"GET\",\n    });\n    if (!response.ok) {\n        console.error(\"Error logging in:\" + response.statusText);\n        return null;\n    } else {\n        return response.text();\n    }\n}\nasync function loginToServer(remember: boolean = false) {\n    login_status.textContent = \"Login started...\";\n    const url:string = (document.getElementById('url_input') as HTMLInputElement).value.trim();\n    const url_notes:string = (document.getElementById('url_input_notes') as HTMLInputElement).value.trim();\n    const username:string = (document.getElementById('username_input') as HTMLInputElement).value.trim();\n    const password:string = (document.getElementById('password_input') as HTMLInputElement).value.trim();\n    if (!username || !password || !url) {\n        login_status.textContent = \"Please fill in all fields\";\n        return;\n    }\n    sessionID = await login(url, username, password);\n    if (sessionID === null) {\n        login_status.textContent = \"Login failed\";\n    } else {\n        login_status.textContent = \"Login successful\";\n        document.getElementById('big_login_status').style.display = \"none\";\n        //fetchAndDisplay();\n    }\n    if (remember) {\n        localStorage.setItem(\"url\", url);\n        localStorage.setItem('url_notes', url_notes);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"password\", password);\n    }\n}\nasync function autoLogin() {\n    const url:string = localStorage.getItem(\"url\");\n    const url_notes:string = localStorage.getItem(\"url_notes\");\n    const username:string = localStorage.getItem(\"username\");\n    const password:string = localStorage.getItem(\"password\");\n    if (url && url_notes && username && password) {\n        (document.getElementById('url_input') as HTMLInputElement).value = url;\n        (document.getElementById('url_input_notes') as HTMLInputElement).value = url_notes;\n        (document.getElementById('username_input') as HTMLInputElement).value = username;\n        (document.getElementById('password_input') as HTMLInputElement).value = password;\n        loginToServer();\n    }\n}\nautoLogin()\n\n\n\n//----------------------------- Sync Data -----------------------------------\nconst proxyURL:string = \"http://localhost:3000\";\nlet sessionID:string = null;\n\n\n\n\n\n//----------------------------- Buttons -----------------------------------\nconst settingsButton:HTMLButtonElement = document.getElementById('settings_button') as HTMLButtonElement;\nconst popup:HTMLElement = document.getElementById('settings');\n\nsettingsButton.addEventListener('click', () => {\n    popup.style.display = popup.style.display === '' || popup.style.display === 'none' ? 'block' : 'none';\n});\ndocument.addEventListener('click', (event) => {\n    // @ts-ignore\n    if (popup.style.display === 'block' && !popup.contains(event.target) && !settingsButton.contains(event.target)) {\n        popup.style.display = 'none';\n    }\n});\ndocument.addEventListener('keydown', (event) => {\n    if (event.key === 'Escape') {\n        popup.style.display = 'none';\n    }\n});\ndocument.getElementById('login_button').addEventListener('click', () => {\n    loginToServer();\n});\ndocument.getElementById('login_remember_button').addEventListener('click', () => {\n    loginToServer(true);\n});\n\ndocument.getElementById('login_forget_button').addEventListener('click', () => {\n    //ToDo clear content\n    localStorage.removeItem('url');\n    localStorage.removeItem('url_notes');\n    localStorage.removeItem('username');\n    localStorage.removeItem('password');\n    document.getElementById('big_login_status').style.display = \"block\";\n});\n\n"],"names":["login_status","document","getElementById","async","loginToServer","remember","textContent","url","value","trim","url_notes","username","password","sessionID","serverUrl","response","fetch","proxyURL","encodeURIComponent","method","ok","text","console","error","statusText","login","style","display","localStorage","setItem","getItem","autoLogin","settingsButton","popup","addEventListener","event","contains","target","key","removeItem"],"mappings":"yCAsCMA,EAA2BC,SAASC,eAAe,gBAazDC,eAAeC,EAAcC,GAAoB,GAC7CL,EAAaM,YAAc,mBAC3B,MAAMC,EAAcN,SAASC,eAAe,aAAkCM,MAAMC,OAC9EC,EAAoBT,SAASC,eAAe,mBAAwCM,MAAMC,OAC1FE,EAAmBV,SAASC,eAAe,kBAAuCM,MAAMC,OACxFG,EAAmBX,SAASC,eAAe,kBAAuCM,MAAMC,OACzFE,GAAaC,GAAaL,GAI/BM,QArBJV,eAAqBW,EAAmBH,EAAkBC,GACtD,MAAMG,QAAiBC,MAAM,GAAGC,qBAA4BC,mBAAmBJ,eAAuBI,mBAAmBP,eAAsBO,mBAAmBN,KAAa,CAC3KO,OAAQ,QAEZ,OAAKJ,EAASK,GAIHL,EAASM,QAHhBC,QAAQC,MAAM,oBAAsBR,EAASS,YACtC,KAIf,CAWsBC,CAAMlB,EAAKI,EAAUC,GACrB,OAAdC,EACAb,EAAaM,YAAc,gBAE3BN,EAAaM,YAAc,mBAC3BL,SAASC,eAAe,oBAAoBwB,MAAMC,QAAU,QAG5DtB,IACAuB,aAAaC,QAAQ,MAAOtB,GAC5BqB,aAAaC,QAAQ,YAAanB,GAClCkB,aAAaC,QAAQ,WAAYlB,GACjCiB,aAAaC,QAAQ,WAAYjB,KAfjCZ,EAAaM,YAAc,2BAiBnC,EACAH,iBACI,MAAMI,EAAaqB,aAAaE,QAAQ,OAClCpB,EAAmBkB,aAAaE,QAAQ,aACxCnB,EAAkBiB,aAAaE,QAAQ,YACvClB,EAAkBgB,aAAaE,QAAQ,YACzCvB,GAAOG,GAAaC,GAAYC,IAC/BX,SAASC,eAAe,aAAkCM,MAAQD,EAClEN,SAASC,eAAe,mBAAwCM,MAAQE,EACxET,SAASC,eAAe,kBAAuCM,MAAQG,EACvEV,SAASC,eAAe,kBAAuCM,MAAQI,EACxER,IAER,CACA2B,GAKA,MAAMd,EAAkB,wBACxB,IAAIJ,EAAmB,KAOvB,MAAMmB,EAAmC/B,SAASC,eAAe,mBAC3D+B,EAAoBhC,SAASC,eAAe,YAElD8B,EAAeE,iBAAiB,SAAS,KACrCD,EAAMP,MAAMC,QAAkC,KAAxBM,EAAMP,MAAMC,SAA0C,SAAxBM,EAAMP,MAAMC,QAAqB,QAAU,MAAM,IAEzG1B,SAASiC,iBAAiB,SAAUC,IAEJ,UAAxBF,EAAMP,MAAMC,SAAwBM,EAAMG,SAASD,EAAME,SAAYL,EAAeI,SAASD,EAAME,UACnGJ,EAAMP,MAAMC,QAAU,WAG9B1B,SAASiC,iBAAiB,WAAYC,IAChB,WAAdA,EAAMG,MACNL,EAAMP,MAAMC,QAAU,WAG9B1B,SAASC,eAAe,gBAAgBgC,iBAAiB,SAAS,KAC9D9B,GAAe,IAEnBH,SAASC,eAAe,yBAAyBgC,iBAAiB,SAAS,KACvE9B,GAAc,EAAK,IAGvBH,SAASC,eAAe,uBAAuBgC,iBAAiB,SAAS,KAErEN,aAAaW,WAAW,OACxBX,aAAaW,WAAW,aACxBX,aAAaW,WAAW,YACxBX,aAAaW,WAAW,YACxBtC,SAASC,eAAe,oBAAoBwB,MAAMC,QAAU,OAAO"}